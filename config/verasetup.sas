/*****************************************************************************\
*        O                                                                     
*       /                                                                      
*  O---O     _  _ _  _ _  _  _|                                                
*       \ \/(/_| (_|| | |(/_(_|                                                
*        O                                                                     
* ____________________________________________________________________________
* Sponsor              : Veramed
* Compund              : VeraMedimol
* Study                : Pilot01
* Analysis             : re_dmc01
* Program              : verssetup.sas
* ____________________________________________________________________________
* DESCRIPTION 
*
* This is the standard Veramed SAS setup file and contains definitions that
* are used across the reporting effort. 
*
* DO NOT EDIT THIS FILE WITHOUT PRIOR APPROVAL 
*
* Study-specific configurations should be defined here:
* - re_<reporting effort>\share\autoexec.sas
*
* Program description:
* 0. define workspace variables used as root of all paths
* 1. create standard SAS Libraries
* 2. setup shared macros (e.g. location to SASAUTOS)
* 3. set format search path based on program type
* 4. Data log and output paths for current program
* 5. Compile the required PROC TEMPLATE(s) from central store
* ..[add more here]
* 99. Finally, run shared autoexec (user config)
*                                                                   
* Input files:
* - [TODO]
* 
* Output files:                                                   
* - [TODO]
*
* Macros: 
* - [TODO]
*
* Assumptions: 
* - this file assumes that it has been invoked by the init macro 
* - and relies upon global variables that are defined by init
* ____________________________________________________________________________
* PROGRAM HISTORY                                                         
*  2022-03-11  |   Stuart.Malcolm   | Created placeholder file
*  2022-03-15  |   Stuart.Malcolm   | fix #39: export __env_client as global
*  2022-04-06  |   Mark.holland     | Added FMTSEARCH for FORMATS / Q_FORMATS cataog
*                                   | and also __OUTPATH / __LOGPATH and __DATAPATH.
*                                   | and added more libnames for QC pointers
*  2022-04-26  |   Mark.Holland     | Libnames set to be conditional
*  2022-05-03  |   Mark.Holland     | SASAUTOS update for progtype level
*  2022-05-16  |   Mark.Holland     | Added __METAPATH parameter
 * ----------------------------------------------------------------------------
*  YYYYMMDD  |  username        | ..description of change..         
\*****************************************************************************/

%put %str(TR)ACE: [Program: verasetup] program start;

* =========================================================================== ;
* 0: define the workspace environment ;
* =========================================================================== ;
/*
 * The workspace environment is where files/data are stored: 
 * - __env_client  = Client deliverables workspace and is is READ-ONLY
 * - __env_runtime = Workspace the programs are running in and is READ/WRITE
 *
 * The runtime environment variable is set by init and is the path to the
 * reporting effort that the program is running in.
 * 
 * In DEVELOPMENT this wil be under Z:\USERS, and
 * In PRODUCTION this will be under Z:\[client]
 *
 * To allow users to develop program in their own workspace, we define a
 * client workspace variable which always points to the Z:\[client] folder.
*/

%* --------------------------------------------------------------------------- ;
%* Define the environment paths ;
%* --------------------------------------------------------------------------- ;

%* client env is always Z:\client\..\re  ;
%global __env_client;
%let __env_client = Z:&__DELIM.&__client.&__DELIM.&__compound.&__DELIM.&__study.&__DELIM.&__re;

%put %str(TR)ACE: [Program: verasetup] Environment [__env_mode:    &__env_mode];
%put %str(TR)ACE: [Program: verasetup] Environment [__env_runtime: &__env_runtime];
%put %str(TR)ACE: [Program: verasetup] Environment [__env_client:  &__env_client];


%* Second PROGCAT variable, to be used in filenames for PROD or QC programs **;
%global __progcat2;
%macro __local_run_progcat();

   %if %upcase(&__progcat)=PROD %then %do;
         %let __progcat2=;
         %put %str(TR)ACE: [Program: verasetup] PROD Programs prefix __PROGCAT2: <null>;
   %end;
   %else %if %upcase(&__progcat)=QC %then %do;
         %let __progcat2=Q_;
         %put %str(TR)ACE: [Program: verasetup] QC Programs prefix __PROGCAT2: &__PROGCAT2;
   %end;
   %else %put %str(TR)ACE: [Program: verasetup] __PROGCAT2 cannot be correctly defined as not QC or PROD program.  It is set as null;


%mend __local_run_progcat;
%__local_run_progcat;
%sysmacdelete __local_run_progcat;



* =========================================================================== ;
* 1: define standard libraries;
* =========================================================================== ;

* there are two sets of all libraries - readonly versions (default) are in    ;
* the __env_client workspace, and a writable version (postfix W) in the       ;
* runtime environmant __env_runtime ;


%macro __local_run_libname();

     %** Start by clearing all possible libname to prevent risk of any libname carry-over **;
     %** checking for presence first                                                     **;

    %put %str(TR)ACE: [Program: verasetup] LIBNAME: Cleared and reset for program in folder &__progtype.. See log for details;

    %if %sysfunc(libref(raw))    =0 %then LIBNAME raw CLEAR;;
    %if %sysfunc(libref(sdtm))   =0 %then LIBNAME sdtm CLEAR;;
    %if %sysfunc(libref(sdtmw))  =0 %then LIBNAME sdtmw CLEAR;;
    %if %sysfunc(libref(sdtmqc)) =0 %then LIBNAME sdtmqc CLEAR;;
    %if %sysfunc(libref(sdtmqcw))=0 %then LIBNAME sdtmqcw CLEAR;;
    %if %sysfunc(libref(adam))   =0 %then LIBNAME adam CLEAR;;
    %if %sysfunc(libref(adamw))  =0 %then LIBNAME adamw CLEAR;;
    %if %sysfunc(libref(adamqc)) =0 %then LIBNAME adamqc CLEAR;;
    %if %sysfunc(libref(adamqcw))=0 %then LIBNAME adamqcw CLEAR;;
    %if %sysfunc(libref(tfl))    =0 %then LIBNAME tfl CLEAR;;
    %if %sysfunc(libref(tflw))   =0 %then LIBNAME tflw CLEAR;;
    %if %sysfunc(libref(tflqc))  =0 %then LIBNAME tflqc CLEAR;;
    %if %sysfunc(libref(tflqcw)) =0 %then LIBNAME tflqcw CLEAR;;
    %if %sysfunc(libref(util))   =0 %then LIBNAME util CLEAR;;
    %if %sysfunc(libref(utilw))  =0 %then LIBNAME util CLEAR;;
    %if %sysfunc(libref(utilqc)) =0 %then LIBNAME utilqc CLEAR;;
    %if %sysfunc(libref(utilqcw))=0 %then LIBNAME utilqc CLEAR;;


     %** Build all libnames based on program type and PROD/QC status always assuming standard folders present **;
     %** In PROD.  Always look upstream with read only - PROD side only;
     %**           Allow read only view of QC for current program type ;
     %**           Only allow to write to W libname for current program type;
     %** In QC.    Always look upstream with read only - PROD side only.;
     %**           Only allow to write to QCW libname for current program type;
     %** If new folder type created - need to consider this logic for  libnames **;


     %** Initally setup the ever present libnames **;
    LIBNAME RAW      "&__env_client.&__DELIM.data&__DELIM.raw"     access=readonly;
    LIBNAME SDTM     "&__env_client.&__DELIM.data&__DELIM.sdtm"    access=readonly;
    LIBNAME REFDATA  "&__env_client.&__DELIM.data&__DELIM.refdata" access=readonly;
    LIBNAME REFDATAW "&__env_runtime.&__DELIM.data&__DELIM.refdata";

     %** Conditionaly apply libnames based on folder name for program type **;

     %** SDTM PROGRAMS **;
    %if %upcase(&__progtype)=SDTM %then %do;
      %if %upcase(&__progcat)=PROD %then %do;
          LIBNAME SDTMQC "&__env_client.&__DELIM.data&__DELIM.sdtm&__DELIM.qc" access=readonly;
          LIBNAME SDTMW  "&__env_runtime.&__DELIM.data&__DELIM.sdtm" ;
      %end;
      %else %if %upcase(&__progcat)=QC %then %do;
          LIBNAME SDTMQCW "&__env_runtime.&__DELIM.data&__DELIM.sdtm&__DELIM.qc" ;
      %end;
    %end;

     %** ADAM PROGRAMS **;
    %if %upcase(&__progtype)=ADAM %then %do;
      LIBNAME ADAM   "&__env_client.&__DELIM.data&__DELIM.adam"    access=readonly;;

      %if %upcase(&__progcat)=PROD %then %do;
          LIBNAME ADAMQC "&__env_client.&__DELIM.data&__DELIM.adam&__DELIM.qc" access=readonly;
          LIBNAME ADAMW  "&__env_runtime.&__DELIM.data&__DELIM.adam";
      %end;
      %else %if %upcase(&__progcat)=QC %then %do;
          LIBNAME ADAMQCW "&__env_runtime.&__DELIM.data&__DELIM.adam&__DELIM.qc" ;
      %end;
    %end;

     %** TFL PROGRAMS **;
    %if %upcase(&__progtype)=TFL %then %do;
      LIBNAME ADAM   "&__env_client.&__DELIM.data&__DELIM.adam"    access=readonly;
      LIBNAME TFL    "&__env_client.&__DELIM.data&__DELIM.tfl"     access=readonly;

      %if %upcase(&__progcat)=PROD %then %do;
          LIBNAME TFLQC  "&__env_client.&__DELIM.data&__DELIM.tfl&__DELIM.qc" access=readonly;
          LIBNAME TFLW   "&__env_runtime.&__DELIM.data&__DELIM.tfl";
      %end;
      %else %if %upcase(&__progcat)=QC %then %do;
          LIBNAME TFLQCW "&__env_runtime.&__DELIM.data&__DELIM.tfl&__DELIM.qc" ;
      %end;
    %end;

     %** UTIL PROGRAMS **;
    %if %upcase(&__progtype)=UTIL %then %do; 
      LIBNAME ADAM   "&__env_client.&__DELIM.data&__DELIM.adam"      access=readonly;
      LIBNAME TFL    "&__env_client.&__DELIM.data&__DELIM.tfl"       access=readonly;
      LIBNAME UTIL   "&__env_client.&__DELIM.data&__DELIM.util"      access=readonly;

      %if %upcase(&__PRODQC)=PROD %then %do;
          LIBNAME UTILQC "&__env_client.&__DELIM.data&__DELIM.util&__DELIM.qc"  access=readonly;
          LIBNAME UTILW  "&__env_runtime.&__DELIM.data&__DELIM.util";
      %end;
      %else %if %upcase(&PRODQC)=QC %then %do;
          LIBNAME UTILQCW "&__env_runtime.&__DELIM.data&__DELIM.util&__DELIM.qc" ;
      %end;
    %end;

%mend __local_run_libname;
%__local_run_libname;
%sysmacdelete __local_run_libname;



* =========================================================================== ;
* 2. Shared macros setup ;
* =========================================================================== ;

* Updating SASAUTOS to reflect the required order of search                                 ;
* PROGMACROS are for those only ever created for a given program type (within PROD-QC level);
*    Primarily if catmacros need to be overwritten selectively                              ;
* CATMACROS within PROD-QC level can be accessed by all program types                       ;
*    This is the preferred standard location for storing all macros to aid visibility       ;
* SHAREMACROS - shared macros that can be used in any program                               ;
%let progmacros = &__env_runtime.&__DELIM.&__progcat.&__DELIM.&__progtype.&__DELIM.macros;
%let catmacros = &__env_runtime.&__DELIM.&__progcat.&__DELIM.share&__DELIM.macros;
%let sharemacros = &__env_runtime.&__DELIM.share&__DELIM.macros;
* Now add the util and share macros paths to the sasautos option;
options sasautos=("&progmacros","&catmacros","&sharemacros",SASAUTOS);
%put %str(TR)ACE: [Program: verasetup] updated [SASAUTOS: %sysfunc(getoption(sasautos)) ];

* =========================================================================== ;
* 3. SAS FORMAT program execution setup ;
* =========================================================================== ;
* On the expectation that FORMATS.SAS or Q_FORMATS.SAS are present and have been executed ;
* Set appropriate FMTSEARCH option so formats can be acessed per program type only        ;
* User WORK formats first - followed by stored formats                                    ;

OPTIONS FMTSEARCH=(WORK refdata.&__progcat2.&__progtype._fmt);
%put %str(TR)ACE: [Program: verasetup] updated [FMTSEARCH: %sysfunc(getoption(fmtsearch)) ];


* =========================================================================== ;
* 4. Additional parameters for using in programs, driven by location ;
* =========================================================================== ;
* these paramters allow users to easily set FILE or FILENAME statement without ;
* the need to force paths into programs ;

%macro __local_run_path();

   %global __datapath __logpath __outpath __metapath;

    %** _Datapath is the common source folder for reading data.  Hence needs to be upstream from _PROGTYPE ;
    %** Will always point for same location as source libname                                              ;
   %if &__progtype=SDTM %then       %let __datapath=&__env_client.&__DELIM.data&__DELIM.raw;
   %else %if &__progtype=ADAM %then %let __datapath=&__env_client.&__DELIM.data&__DELIM.sdtm;
   %else %if &__progtype=TFL %then  %let __datapath=&__env_client.&__DELIM.data&__DELIM.adam;
   %else                            %let __datapath=MISSING;;

    %** _logpath is the location of the log files created by the current program **;
   %let __logpath=&__env_runtime.&__DELIM.&__progcat&__DELIM.&__progtype.&__DELIM.saslogs;
    %** _outpath is the location of the output files created by the current program **;
   %let __outpath=&__env_runtime.&__DELIM.&__progcat&__DELIM.&__progtype.&__DELIM.output;
    %** metapath is fixed per the below location **;
   %let __metapath=&__env_client.&__DELIM.data&__DELIM.meta;

   %put %str(TR)ACE: [Program: verasetup] __DATAPATH: &__datapath.;
   %put %str(TR)ACE: [Program: verasetup] __LOGPATH:  &__logpath.;
   %put %str(TR)ACE: [Program: verasetup] __OUTPATH:  &__outpath.;
   %put %str(TR)ACE: [Program: verasetup] __METAPATH: &__metapath.;

%mend __local_run_path;
%__local_run_path;

%sysmacdelete __local_run_path;



* =========================================================================== ;
* 4. PROC TEMPLATES compiled from central store                               ;
* =========================================================================== ;
* All templates to be stored in the macro program below stored in share\macros;
* All different template must have a unique and logical name                  ;

%s_template;




***********************************************;
* [TODO] add other standard veramed setup here ;
***********************************************;



* =========================================================================== ;
* 99. Final step. Run shared autoexec (contains study-specific setup)         ;
* =========================================================================== ;
%macro __local_run_autoexec();
   %local autoexec;
   %let autoexec = &__env_runtime.&__DELIM.share&__DELIM.autoexec.sas;

   %if %sysfunc(fileexist(%quote(&autoexec.))) %then %do;
     %put TRACE: [Program: verasetup] Shared autoexec found. [autoexec: &autoexec.].;
     %inc "&autoexec.";
   %end;
   %else %put DEBUG: [Program: verasetup] Shared autoexec does not exist. [autoexec: &autoexec.].;
%mend __local_run_autoexec;

%__local_run_autoexec;

* ---------------------------------------------------------------------------- ;
* clean-up ;
* ---------------------------------------------------------------------------- ;
%sysmacdelete  __local_run_autoexec
              ;

%put %str(TR)ACE: [Program: verasetup] program end

